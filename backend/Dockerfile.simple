# Simplified Dockerfile that avoids npm ci issues entirely
# Uses npm install throughout for maximum compatibility

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Set npm configuration for better performance and lower memory usage
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_PROGRESS=false

# Copy package.json
COPY backend/package.json ./

# Use npm install instead of npm ci to avoid lock file issues
RUN npm install --prefer-offline --no-audit --no-fund && npm cache clean --force

# Copy source code and TypeScript configuration
COPY backend/src ./src
COPY backend/tsconfig.json ./tsconfig.json
COPY backend/tsconfig.build.json ./tsconfig.build.json

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package.json for production
COPY backend/package.json ./

# Install only production dependencies using npm install
RUN npm install --only=production --prefer-offline --no-audit --no-fund && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist

# Create logs directory
RUN mkdir -p logs && chown -R nodejs:nodejs logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Switch to non-root user
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "dist/index.js"]