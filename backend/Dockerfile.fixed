# Backend Dockerfile for Privacy Data Removal Service
# Fixed version with explicit file copying and fallback strategy

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Set npm configuration for better performance and lower memory usage
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_PROGRESS=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_CACHE=/tmp/.npm
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Copy package.json first
COPY backend/package.json ./package.json

# Create a script to handle package-lock.json copying
RUN echo '#!/bin/sh' > /tmp/copy-lockfile.sh && \
    echo 'if [ -f /build-context/backend/package-lock.json ]; then' >> /tmp/copy-lockfile.sh && \
    echo '  cp /build-context/backend/package-lock.json /app/package-lock.json' >> /tmp/copy-lockfile.sh && \
    echo '  echo "package-lock.json copied successfully"' >> /tmp/copy-lockfile.sh && \
    echo 'else' >> /tmp/copy-lockfile.sh && \
    echo '  echo "No package-lock.json found, will use npm install"' >> /tmp/copy-lockfile.sh && \
    echo '  touch /app/no-lockfile.txt' >> /tmp/copy-lockfile.sh && \
    echo 'fi' >> /tmp/copy-lockfile.sh && \
    chmod +x /tmp/copy-lockfile.sh

# Copy the entire backend directory temporarily to check for package-lock.json
COPY backend/ /tmp/backend-check/

# Copy package-lock.json if it exists
RUN if [ -f /tmp/backend-check/package-lock.json ]; then \
      cp /tmp/backend-check/package-lock.json ./package-lock.json && \
      echo "package-lock.json found and copied"; \
    else \
      echo "No package-lock.json found, will use npm install" && \
      touch ./no-lockfile.txt; \
    fi && \
    rm -rf /tmp/backend-check

# Install dependencies with comprehensive fallback strategy
RUN echo "Starting dependency installation..." && \
    if [ -f package-lock.json ]; then \
      echo "Found package-lock.json, attempting npm ci..." && \
      (npm ci --prefer-offline --no-audit --no-fund || \
       (echo "npm ci failed, falling back to npm install..." && \
        rm -f package-lock.json && \
        npm install --prefer-offline --no-audit --no-fund)); \
    else \
      echo "No package-lock.json found, using npm install..." && \
      npm install --prefer-offline --no-audit --no-fund; \
    fi && \
    echo "Dependencies installed successfully" && \
    npm cache clean --force

# Copy source code and TypeScript configuration
COPY backend/src ./src
COPY backend/tsconfig.json ./tsconfig.json
COPY backend/tsconfig.build.json ./tsconfig.build.json

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Set npm configuration for production stage
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_PROGRESS=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_CACHE=/tmp/.npm
ENV NODE_OPTIONS="--max-old-space-size=512"

# Copy package.json for production
COPY backend/package.json ./package.json

# Install only production dependencies with memory optimization
RUN npm install --only=production --prefer-offline --no-audit --no-fund && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist

# Create logs directory
RUN mkdir -p logs && chown -R nodejs:nodejs logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Expose port
EXPOSE 3000

# Switch to non-root user
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["node", "dist/index.js"]