version: '3.8'

services:
  # Backend service - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: privacy-backend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - FRONTEND_URL=http://localhost
      - MONITORING_ENABLED=true
      - METRICS_INTERVAL=60000
      - ALERTS_ENABLED=true
      - METRICS_RETENTION_DAYS=30
      # Security settings
      - CPU_WARNING_THRESHOLD=70
      - CPU_CRITICAL_THRESHOLD=90
      - MEMORY_WARNING_THRESHOLD=80
      - MEMORY_CRITICAL_THRESHOLD=95
      - RESPONSE_TIME_WARNING_THRESHOLD=2000
      - RESPONSE_TIME_CRITICAL_THRESHOLD=5000
      - ERROR_RATE_WARNING_THRESHOLD=5
      - ERROR_RATE_CRITICAL_THRESHOLD=10
      # API Keys (should be set in production .env file)
      - DYXLESS_API_KEY=${DYXLESS_API_KEY}
      - ITP_API_KEY=${ITP_API_KEY}
      - LEAK_OSINT_API_KEY=${LEAK_OSINT_API_KEY}
      - USERBOX_API_KEY=${USERBOX_API_KEY}
      - VEKTOR_API_KEY=${VEKTOR_API_KEY}
    volumes:
      - backend_logs:/app/logs
      - backend_data:/app/data
    networks:
      - privacy-network
    env_file:
      - ./backend/.env.production
    restart: always
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend service - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: privacy-frontend-prod
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - REACT_APP_ENVIRONMENT=production
    networks:
      - privacy-network
    depends_on:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: privacy-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - privacy-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: privacy-nginx-prod
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - privacy-network
    depends_on:
      - frontend
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  backend_logs:
    driver: local
  backend_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  privacy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16