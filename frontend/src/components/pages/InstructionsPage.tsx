/**
 * Instructions Page Component
 * Displays step-by-step removal instructions for a specific bot
 */

import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useSearchParams, useNavigate, Link } from 'react-router-dom';
import { useAppContext } from '../../contexts/AppContext';
import { useInstructions } from '../../hooks/useApi';
import { BotInstructions } from '../../types/api';
import { formatDate } from '../../utils/helpers';
import './InstructionsPage.css';

interface StepProps {
  step: string;
  index: number;
  isCompleted: boolean;
  onToggleComplete: (index: number) => void;
}

function InstructionStep({ step, index, isCompleted, onToggleComplete }: StepProps) {
  return (
    <div className={`instruction-step ${isCompleted ? 'completed' : ''}`}>
      <div className="step-header">
        <div className="step-number">
          {isCompleted ? '‚úÖ' : index + 1}
        </div>
        <div className="step-content">
          <p className="step-text">{step}</p>
        </div>
        <div className="step-actions">
          <button
            className={`step-toggle ${isCompleted ? 'completed' : ''}`}
            onClick={() => onToggleComplete(index)}
            aria-label={isCompleted ? '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'}
          >
            {isCompleted ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}
          </button>
        </div>
      </div>
    </div>
  );
}

export function InstructionsPage() {
  const { botId } = useParams<{ botId: string }>();
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { addNotification } = useAppContext();
  
  // Get instructions for the specific bot
  const { instructions, loading, error, refetch } = useInstructions(botId);
  
  // Local state for tracking completion
  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());
  const [showAllSteps, setShowAllSteps] = useState(false);
  const [isBulkMode, setBulkMode] = useState(false);
  const [bulkBots, setBulkBots] = useState<string[]>([]);

  // Check if this is bulk mode (multiple bots)
  useEffect(() => {
    const bulk = searchParams.get('bulk');
    if (bulk) {
      setBulkMode(true);
      setBulkBots(bulk.split(','));
    }
  }, [searchParams]);

  // Toggle step completion
  const toggleStepCompletion = useCallback((stepIndex: number) => {
    setCompletedSteps(prev => {
      const newSet = new Set(prev);
      if (newSet.has(stepIndex)) {
        newSet.delete(stepIndex);
      } else {
        newSet.add(stepIndex);
      }
      return newSet;
    });
  }, []);

  // Mark all steps as completed
  const markAllCompleted = useCallback(() => {
    if (!instructions) return;
    
    const allSteps = new Set(instructions.instructions.steps.map((_, index) => index));
    setCompletedSteps(allSteps);
    
    addNotification({
      type: 'success',
      title: '–í—Å–µ —à–∞–≥–∏ –æ—Ç–º–µ—á–µ–Ω—ã',
      message: '–í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
      autoClose: true
    });
  }, [instructions, addNotification]);

  // Clear all completions
  const clearAllCompleted = useCallback(() => {
    setCompletedSteps(new Set());
    
    addNotification({
      type: 'info',
      title: '–û—Ç–º–µ—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã',
      message: '–í—Å–µ –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã',
      autoClose: true
    });
  }, [addNotification]);

  // Copy instructions to clipboard
  const copyInstructions = useCallback(async () => {
    if (!instructions) return;

    const text = [
      `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${instructions.botName}`,
      '',
      ...instructions.instructions.steps.map((step, index) => `${index + 1}. ${step}`),
      '',
      instructions.instructions.additionalInfo ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${instructions.instructions.additionalInfo}` : '',
      `–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${instructions.instructions.estimatedTime}`,
      `–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${instructions.instructions.difficulty}`
    ].filter(Boolean).join('\n');

    try {
      await navigator.clipboard.writeText(text);
      addNotification({
        type: 'success',
        title: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã',
        message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
        autoClose: true
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
        autoClose: true
      });
    }
  }, [instructions, addNotification]);

  // Handle navigation back to results
  const handleBackToResults = useCallback(() => {
    navigate('/results');
  }, [navigate]);

  // Loading state
  if (loading) {
    return (
      <div className="instructions-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <h2>–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...</h2>
          <p>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="instructions-page">
        <div className="error-container">
          <div className="error-icon">‚ö†Ô∏è</div>
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</h2>
          <p className="error-message">{error}</p>
          <div className="error-actions">
            <button onClick={refetch} className="btn btn-primary">
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
            <button onClick={handleBackToResults} className="btn btn-secondary">
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            </button>
          </div>
        </div>
      </div>
    );
  }

  // No instructions found
  if (!instructions) {
    return (
      <div className="instructions-page">
        <div className="no-instructions-container">
          <div className="no-instructions-icon">üìã</div>
          <h2>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
          <p>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ {botId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
          <div className="no-instructions-actions">
            <button onClick={handleBackToResults} className="btn btn-primary">
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            </button>
          </div>
        </div>
      </div>
    );
  }

  const completionPercentage = Math.round((completedSteps.size / instructions.instructions.steps.length) * 100);
  const isAllCompleted = completedSteps.size === instructions.instructions.steps.length;

  return (
    <div className="instructions-page">
      {/* Header */}
      <div className="instructions-header">
        <div className="header-content">
          <div className="breadcrumb">
            <Link to="/results" className="breadcrumb-link">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            </Link>
            <span className="breadcrumb-separator">‚Üí</span>
            <span className="breadcrumb-current">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</span>
          </div>

          <h1 className="page-title">
            {instructions.instructions.title}
          </h1>

          {isBulkMode && (
            <div className="bulk-mode-notice">
              <span className="bulk-icon">üì¶</span>
              –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è {bulkBots.length} –±–æ—Ç–æ–≤
            </div>
          )}

          <div className="bot-info">
            <div className="bot-name-badge">
              {instructions.botName}
            </div>
            <div className="instruction-meta">
              <span className="meta-item">
                ‚è±Ô∏è {instructions.instructions.estimatedTime}
              </span>
              <span className="meta-item">
                üìä {instructions.instructions.difficulty}
              </span>
              <span className="meta-item">
                üìù {instructions.instructions.steps.length} —à–∞–≥–æ–≤
              </span>
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="progress-section">
          <div className="progress-header">
            <span className="progress-label">
              –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completedSteps.size} –∏–∑ {instructions.instructions.steps.length}
            </span>
            <span className="progress-percentage">
              {completionPercentage}%
            </span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${completionPercentage}%` }}
            />
          </div>
          {isAllCompleted && (
            <div className="completion-message">
              üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã.
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="header-actions">
          <button
            onClick={copyInstructions}
            className="btn btn-secondary"
            title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
          >
            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </button>
          
          {completedSteps.size > 0 ? (
            <button
              onClick={clearAllCompleted}
              className="btn btn-secondary"
            >
              ‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏
            </button>
          ) : (
            <button
              onClick={markAllCompleted}
              className="btn btn-secondary"
            >
              ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ
            </button>
          )}

          <button
            onClick={handleBackToResults}
            className="btn btn-primary"
          >
            ‚Üê –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
          </button>
        </div>
      </div>

      {/* Instructions Content */}
      <div className="instructions-content">
        <div className="instructions-container">
          {/* Important Notice */}
          <div className="important-notice">
            <div className="notice-icon">‚ö†Ô∏è</div>
            <div className="notice-content">
              <h3>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              <ul>
                <li>–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</li>
                <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</li>
                <li>–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π</li>
                <li>–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</li>
              </ul>
            </div>
          </div>

          {/* Steps */}
          <div className="steps-container">
            <h2 className="steps-title">–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h2>
            
            <div className="steps-list">
              {instructions.instructions.steps.map((step, index) => (
                <InstructionStep
                  key={index}
                  step={step}
                  index={index}
                  isCompleted={completedSteps.has(index)}
                  onToggleComplete={toggleStepCompletion}
                />
              ))}
            </div>
          </div>

          {/* Additional Information */}
          {instructions.instructions.additionalInfo && (
            <div className="additional-info">
              <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              <div className="info-content">
                <div className="info-icon">üí°</div>
                <p>{instructions.instructions.additionalInfo}</p>
              </div>
            </div>
          )}

          {/* Support Section */}
          <div className="support-section">
            <h3>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h3>
            <div className="support-content">
              <div className="support-item">
                <div className="support-icon">‚ùì</div>
                <div className="support-text">
                  <strong>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?</strong>
                  <p>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
                </div>
              </div>
              <div className="support-item">
                <div className="support-icon">üìû</div>
                <div className="support-text">
                  <strong>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</strong>
                  <p>Email: support@example.com | Telegram: @support_bot</p>
                </div>
              </div>
            </div>
          </div>

          {/* Bulk Mode Instructions */}
          {isBulkMode && (
            <div className="bulk-instructions">
              <h3>–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ</h3>
              <div className="bulk-content">
                <p>
                  –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {bulkBots.length} –±–æ—Ç–æ–≤. 
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –±–æ—Ç–æ–≤:
                </p>
                <div className="bulk-bots-list">
                  {bulkBots.map((botId, index) => (
                    <div key={botId} className="bulk-bot-item">
                      <span className="bulk-bot-number">{index + 1}</span>
                      <span className="bulk-bot-name">–ë–æ—Ç {String.fromCharCode(65 + index)}</span>
                      <Link 
                        to={`/instructions/${botId}`}
                        className="bulk-bot-link"
                      >
                        –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Üí
                      </Link>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="instructions-footer">
        <div className="footer-content">
          <div className="footer-info">
            <p>
              <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> {formatDate(instructions.meta.lastUpdated)}
            </p>
            <p>
              <strong>–í–µ—Ä—Å–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</strong> {instructions.meta.version}
            </p>
          </div>
          
          <div className="footer-actions">
            <button
              onClick={handleBackToResults}
              className="btn btn-secondary"
            >
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            </button>
            
            {!isAllCompleted && (
              <button
                onClick={() => setShowAllSteps(!showAllSteps)}
                className="btn btn-secondary"
              >
                {showAllSteps ? '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}