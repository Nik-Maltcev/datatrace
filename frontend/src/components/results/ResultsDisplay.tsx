/**
 * Results Display Component
 * Displays search results grouped by bots with removal options
 */

import React, { useState, useCallback, useMemo } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAppContext } from '../../contexts/AppContext';
import { SearchResults, SearchResult, FoundDataItem } from '../../types/api';
import { formatDate, formatRelativeTime, getSearchTypeLabel } from '../../utils/helpers';
import './ResultsDisplay.css';

interface ResultsDisplayProps {
  results: SearchResults;
  onRetry?: () => void;
  className?: string;
}

interface GroupedResults {
  withData: SearchResult[];
  withoutData: SearchResult[];
  withErrors: SearchResult[];
}

export function ResultsDisplay({ results, onRetry, className = '' }: ResultsDisplayProps) {
  const navigate = useNavigate();
  const { addNotification } = useAppContext();
  
  // Local state for UI interactions
  const [expandedBots, setExpandedBots] = useState<Set<string>>(new Set());
  const [selectedBots, setSelectedBots] = useState<Set<string>>(new Set());
  const [showAllBots, setShowAllBots] = useState(false);

  // Group results by data availability
  const groupedResults: GroupedResults = useMemo(() => {
    return results.results.reduce(
      (acc, result) => {
        if (result.status === 'error') {
          acc.withErrors.push(result);
        } else if (result.hasData) {
          acc.withData.push(result);
        } else {
          acc.withoutData.push(result);
        }
        return acc;
      },
      { withData: [], withoutData: [], withErrors: [] } as GroupedResults
    );
  }, [results.results]);

  // Toggle bot expansion
  const toggleBotExpansion = useCallback((botId: string) => {
    setExpandedBots(prev => {
      const newSet = new Set(prev);
      if (newSet.has(botId)) {
        newSet.delete(botId);
      } else {
        newSet.add(botId);
      }
      return newSet;
    });
  }, []);

  // Toggle bot selection for bulk actions
  const toggleBotSelection = useCallback((botId: string) => {
    setSelectedBots(prev => {
      const newSet = new Set(prev);
      if (newSet.has(botId)) {
        newSet.delete(botId);
      } else {
        newSet.add(botId);
      }
      return newSet;
    });
  }, []);

  // Select all bots with data
  const selectAllBotsWithData = useCallback(() => {
    const botsWithData = groupedResults.withData.map(result => result.botId);
    setSelectedBots(new Set(botsWithData));
  }, [groupedResults.withData]);

  // Clear all selections
  const clearAllSelections = useCallback(() => {
    setSelectedBots(new Set());
  }, []);

  // Handle removal instructions navigation
  const handleGetInstructions = useCallback((botId: string) => {
    navigate(`/instructions/${botId}`);
    
    addNotification({
      type: 'info',
      title: '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º',
      message: `–û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${results.results.find(r => r.botId === botId)?.botName}`,
      autoClose: true
    });
  }, [navigate, addNotification, results.results]);

  // Handle bulk instructions
  const handleBulkInstructions = useCallback(() => {
    if (selectedBots.size === 0) {
      addNotification({
        type: 'warning',
        title: '–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç—ã',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
        autoClose: true
      });
      return;
    }

    // For now, navigate to the first selected bot's instructions
    // In a real app, this could open a bulk instructions page
    const firstBotId = Array.from(selectedBots)[0];
    navigate(`/instructions/${firstBotId}?bulk=${Array.from(selectedBots).join(',')}`);
  }, [selectedBots, navigate, addNotification]);

  // Copy data to clipboard
  const copyToClipboard = useCallback(async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      addNotification({
        type: 'success',
        title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
        message: '–î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
        autoClose: true
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
        autoClose: true
      });
    }
  }, [addNotification]);

  // Render data field
  const renderDataField = useCallback((field: FoundDataItem, botId: string) => {
    const fieldId = `${botId}-${field.field}`;
    
    return (
      <div key={fieldId} className="data-field">
        <div className="data-field-header">
          <span className="data-field-name">{field.field}</span>
          {field.confidence && (
            <span className={`confidence-badge confidence-${Math.floor(field.confidence * 100 / 25)}`}>
              {Math.round(field.confidence * 100)}%
            </span>
          )}
        </div>
        <div className="data-field-content">
          <span className="data-field-value">{field.value}</span>
          <button
            className="copy-button"
            onClick={() => copyToClipboard(field.value)}
            title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
          >
            üìã
          </button>
        </div>
        {field.source && (
          <div className="data-field-source">
            –ò—Å—Ç–æ—á–Ω–∏–∫: {field.source}
          </div>
        )}
      </div>
    );
  }, [copyToClipboard]);

  // Render bot result card
  const renderBotResult = useCallback((result: SearchResult) => {
    const isExpanded = expandedBots.has(result.botId);
    const isSelected = selectedBots.has(result.botId);
    const hasData = result.hasData && result.foundData.length > 0;

    return (
      <div key={result.botId} className={`bot-result ${result.status} ${isSelected ? 'selected' : ''}`}>
        <div className="bot-result-header">
          <div className="bot-info">
            <div className="bot-selection">
              {hasData && (
                <input
                  type="checkbox"
                  checked={isSelected}
                  onChange={() => toggleBotSelection(result.botId)}
                  className="bot-checkbox"
                  aria-label={`–í—ã–±—Ä–∞—Ç—å ${result.botName}`}
                />
              )}
            </div>
            
            <div className="bot-identity">
              <h3 className="bot-name">{result.botName}</h3>
              <div className="bot-status">
                <span className={`status-indicator status-${result.status}`}>
                  {result.status === 'success' && hasData && '‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã'}
                  {result.status === 'success' && !hasData && '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                  {result.status === 'no_data' && '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                  {result.status === 'error' && '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'}
                  {result.status === 'timeout' && '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è'}
                  {result.status === 'circuit_open' && 'üîå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                </span>
              </div>
            </div>
          </div>

          <div className="bot-actions">
            {hasData && (
              <>
                <button
                  className="btn btn-primary btn-small"
                  onClick={() => handleGetInstructions(result.botId)}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
                
                {result.foundData.length > 1 && (
                  <button
                    className="btn btn-secondary btn-small"
                    onClick={() => toggleBotExpansion(result.botId)}
                  >
                    {isExpanded ? '‚ñ≤ –°–≤–µ—Ä–Ω—É—Ç—å' : `‚ñº –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ (${result.foundData.length})`}
                  </button>
                )}
              </>
            )}
            
            {result.status === 'error' && onRetry && (
              <button
                className="btn btn-secondary btn-small"
                onClick={onRetry}
              >
                üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        {/* Data Display */}
        {hasData && (
          <div className="bot-data">
            <div className="data-summary">
              –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: <strong>{result.foundData.length}</strong>
            </div>
            
            <div className="data-fields">
              {(isExpanded ? result.foundData : result.foundData.slice(0, 3)).map(field =>
                renderDataField(field, result.botId)
              )}
              
              {!isExpanded && result.foundData.length > 3 && (
                <div className="data-field-more">
                  <button
                    className="btn-link"
                    onClick={() => toggleBotExpansion(result.botId)}
                  >
                    –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {result.foundData.length - 3} –∑–∞–ø–∏—Å–µ–π...
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Error Display */}
        {result.status === 'error' && result.errorMessage && (
          <div className="bot-error">
            <div className="error-message">
              <span className="error-icon">‚ö†Ô∏è</span>
              {result.errorMessage}
            </div>
          </div>
        )}
      </div>
    );
  }, [
    expandedBots,
    selectedBots,
    toggleBotExpansion,
    toggleBotSelection,
    handleGetInstructions,
    onRetry,
    renderDataField
  ]);

  return (
    <div className={`results-display ${className}`}>
      {/* Results Header */}
      <div className="results-header">
        <div className="results-summary">
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
          <div className="search-info">
            <div className="search-query">
              –ü–æ–∏—Å–∫ –ø–æ {getSearchTypeLabel(results.searchType).toLowerCase()}: 
              <span className="query-value">{results.query}</span>
            </div>
            <div className="search-meta">
              <span className="search-time">
                {formatRelativeTime(results.timestamp)}
              </span>
              <span className="search-duration">
                –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {(results.searchDuration / 1000).toFixed(1)}—Å
              </span>
              {results.isDegraded && (
                <span className="degraded-notice">
                  ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                </span>
              )}
            </div>
          </div>
        </div>

        <div className="results-stats">
          <div className="stat-item">
            <span className="stat-value">{results.totalBotsSearched}</span>
            <span className="stat-label">–ë–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ</span>
          </div>
          <div className="stat-item success">
            <span className="stat-value">{results.totalBotsWithData}</span>
            <span className="stat-label">–ù–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">{results.totalRecords}</span>
            <span className="stat-label">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</span>
          </div>
        </div>
      </div>

      {/* Bulk Actions */}
      {groupedResults.withData.length > 0 && (
        <div className="bulk-actions">
          <div className="bulk-selection">
            <button
              className="btn-link"
              onClick={selectAllBotsWithData}
              disabled={selectedBots.size === groupedResults.withData.length}
            >
              –í—ã–±—Ä–∞—Ç—å –≤—Å–µ ({groupedResults.withData.length})
            </button>
            {selectedBots.size > 0 && (
              <button
                className="btn-link"
                onClick={clearAllSelections}
              >
                –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
              </button>
            )}
          </div>

          {selectedBots.size > 0 && (
            <div className="bulk-actions-buttons">
              <span className="selected-count">
                –í—ã–±—Ä–∞–Ω–æ: {selectedBots.size}
              </span>
              <button
                className="btn btn-primary"
                onClick={handleBulkInstructions}
              >
                üóëÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
              </button>
            </div>
          )}
        </div>
      )}

      {/* Results Content */}
      <div className="results-content">
        {/* Bots with Data */}
        {groupedResults.withData.length > 0 && (
          <div className="results-section">
            <h3 className="section-title success">
              ‚úÖ –ë–æ—Ç—ã —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ({groupedResults.withData.length})
            </h3>
            <div className="results-grid">
              {groupedResults.withData.map(renderBotResult)}
            </div>
          </div>
        )}

        {/* Bots with Errors */}
        {groupedResults.withErrors.length > 0 && (
          <div className="results-section">
            <h3 className="section-title error">
              ‚ö†Ô∏è –ë–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ ({groupedResults.withErrors.length})
            </h3>
            <div className="results-grid">
              {groupedResults.withErrors.map(renderBotResult)}
            </div>
          </div>
        )}

        {/* Bots without Data */}
        {groupedResults.withoutData.length > 0 && (
          <div className="results-section">
            <div className="section-header">
              <h3 className="section-title neutral">
                ‚ùå –ë–æ—Ç—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö ({groupedResults.withoutData.length})
              </h3>
              <button
                className="btn-link"
                onClick={() => setShowAllBots(!showAllBots)}
              >
                {showAllBots ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ'}
              </button>
            </div>
            
            {showAllBots && (
              <div className="results-grid">
                {groupedResults.withoutData.map(renderBotResult)}
              </div>
            )}
          </div>
        )}
      </div>

      {/* No Results */}
      {results.totalBotsWithData === 0 && groupedResults.withErrors.length === 0 && (
        <div className="no-results">
          <div className="no-results-icon">üéâ</div>
          <h3>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</h3>
          <p>
            –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤. 
            –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Å–∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä–æ–≤–∞–Ω–∞.
          </p>
          <div className="no-results-actions">
            <Link to="/" className="btn btn-primary">
              –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
            </Link>
          </div>
        </div>
      )}

      {/* Footer Actions */}
      <div className="results-footer">
        <div className="footer-info">
          <p>
            <strong>–í–∞–∂–Ω–æ:</strong> –î–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. 
            –ù–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è.
          </p>
          {results.encryptionEnabled && (
            <p className="encryption-notice">
              üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
            </p>
          )}
        </div>

        <div className="footer-actions">
          <Link to="/" className="btn btn-secondary">
            ‚Üê –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
          </Link>
          
          {results.totalBotsWithData > 0 && (
            <button
              className="btn btn-primary"
              onClick={() => {
                const botsWithData = groupedResults.withData.map(r => r.botId);
                navigate(`/instructions/${botsWithData[0]}?bulk=${botsWithData.join(',')}`);
              }}
            >
              –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Üí
            </button>
          )}
        </div>
      </div>
    </div>
  );
}